git init

git add myfile 
git commit -m "destination"

git status 
git diff myfile 

查看版本
git log  
git log --pretty=onelilne

版本回退
HEAD指向的版本就是当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本HEAD~100
因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
git reset --hard HEAD^
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本


工作区和暂存区
	用git diff HEAD -- myfile  命令可以查看工作区和版本库里面最新版本的区别

撤销修改
	git checkout -- myfile 可以丢弃"工作区"的修改

	git reset HEAD file  可以把暂存区的修改撤销掉（unstage），重新放回工作区

删除文件
	一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
	$ git checkout -- myfile


远程仓库 
	创建github 设置ssh key
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有	
	没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开
		Shell（Windows下打开Git Bash），创建SSH Key：

	$ ssh-keygen -t rsa -C "youremail@example.com"
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

	最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）
	。所以，不要把敏感信息放进去


添加远程库
（先有本地库，后有远程库的时候，如何关联远程库）
	git remote add origin git@github.com:michaelliao/learngit.git
	 git push -u origin master
	远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字
	一看就	知道是远程库。
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的
	master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master
	分支关联起来。
	$ git push origin master
	删掉你的远程库git remote remove ×××××
	

从远程库克隆
	假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆
	
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
	git clone git@github.com:Lonyap.gitskills.github
	git clone git://github.com/Lonyap/gitskills.git
	git clone http://github.com/Lonyap/gitskills.git



